---
title: "DNA Methylation: Bisulfite Sequencing Report"
author: "."
date: "`r Sys.Date()`"
params:
  dataset: "."      
  panel_data: NULL      # CSV path when dataset = "panel"
  file_list: "qc_files.csv"
format:
  html:
    fig-cap-location: bottom
    df-print: paged
    fig-width: 10
    fig-height: 8
    embed-resources: true
    toc: true
    cache: false
    warning: false
---

```{r, include=FALSE}
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(gridExtra)
library(reshape2)
library(RColorBrewer)

files_path <- fread(params$file_list, header = FALSE)

label_map <- list(
  "coverage-matrix.csv"              = "coverage_matrix",
  "estimate-cell-counts.csv"         = "estimate_cell_count",
  "methylation-matrix.csv"           = "methylation_matrix",
  "cutadapt_filtered_reads_plot.txt" = "reads"
)

for (path in files_path$V1) {
  filename <- basename(path)
  if (filename %in% names(label_map)) {
    var_name <- label_map[[filename]]
    assign(var_name, fread(path), envir = .GlobalEnv)
  }
}

colnames(reads)[colnames(reads) == "Reads.passing.filters"] <- "Reads"
reads <- reads %>% mutate(Sample = gsub("(_R[12]|_[12])$", "", Sample)) %>% distinct(Sample, .keep_all = TRUE)
colnames(estimate_cell_count)[1] <- "cell_type"
panel <- fread(params$panel_data)
setkey(panel, chr, start, end)
setkey(methylation_matrix ,  chr, start, end)
input.data         <- foverlaps(methylation_matrix, panel, type = "within", nomatch = 0L)
input.coverage     <- foverlaps(coverage_matrix, panel, type = "within", nomatch = 0L)
input.data         <- input.data %>% select(-matches("chr|start|end|details|source"))
methylation_matrix <-methylation_matrix %>% select(-matches("chr|start|end"))
coverage_matrix    <- coverage_matrix %>% select(-matches("chr|start|end"))
input.coverage     <- input.coverage  %>% select(-matches("chr|start|end|details|source|i.start|i.end"))

```
## <sup>Methylation Distribution Plot</sup>

* This plot shows the distribution of DNA methylation levels across multiple samples. 
* The x-axis represents methylation values from 0 (unmethylated) to 1 (fully methylated), while the y-axis shows the density of CpG sites. 
* Each line corresponds to a sample, with color shading indicating overlapping densities. 
* The bimodal pattern, with peaks near 0 and 1, is typical for methylation data, highlighting unmethylated and highly methylated CpG regions. 
* This plot captures methylation variability across samples.

```{r}
#| echo: false
#| label: Density Plot of Methylation
#| code-fold: false
#| fig-cap: "**Figure 1**: Density Plot of Beadchip Methylation for Samples."

methylation_data_long <- input.data %>%
  pivot_longer(cols = everything(), names_to = "Sample", values_to = "Methylation")

n_panel_cpg_sites <- nrow(input.data)
n_total_cpg_sites <- nrow(methylation_matrix)
n_samples <- ncol(input.data)

ggplot(methylation_data_long,
       aes(x = Methylation, fill = sub(".*_(S\\d+)$", "\\1", Sample),
           colour = sub(".*_(S\\d+)$", "\\1", Sample))) +
  geom_density(alpha = 0.25, linewidth = 0.6) +
  labs(title = "Density Plot of Methylation for Samples",
       x = "Methylation", 
       y = "Density",
       fill = "Sample", 
       colour = "Sample") + 
  theme(legend.position = "right") +
  annotate("text", x = Inf, y = Inf, hjust = 1.05, vjust = 1.1, size = 3,
           label = glue::glue(
             "Number of Panel CpG sites: {scales::comma(n_panel_cpg_sites)}\n",
             "Number of Total CpG sites: {scales::comma(n_total_cpg_sites)}\n",
             "Number of samples : {n_samples}"
           ))
```
## <sup>Estimate cell counts</sup>

* The plot shows data density with labels for Q1, median, and Q3.

```{r}  
#| echo: false
#| code-fold: false
#| label: Violin Plot
#| fig-cap: "**Figure 2**: The violin plot displays the distribution of estimated cell counts across cell types."

getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
data <- estimate_cell_count %>%
  pivot_longer(cols = -cell_type, names_to = "Sample", values_to = "Value") %>%
  rename(CellType = cell_type)

iqr_data <- data %>%
  group_by(CellType) %>%
  summarize(
    Q1 = quantile(Value, 0.25),
    Median = median(Value),
    Q3 = quantile(Value, 0.75))
violin_plot <- ggplot(data, aes(x = CellType, y = Value, fill = CellType)) +
  geom_violin(alpha = 0.5, position = position_dodge(width = 0.8)) + 
  scale_fill_manual(values = getPalette(length(unique(data$CellType)))) +  
  geom_text(data = iqr_data, aes(x = CellType, y = Q3, label = paste0("Q3: ", round(Q3, 2))), 
            position = position_nudge(x = 0.2), size = 3) + 
  geom_text(data = iqr_data, aes(x = CellType, y = Median, label = paste0("Median: ", round(Median, 2))), 
            position = position_nudge(x = 0.2), size = 3) +  
  geom_text(data = iqr_data, aes(x = CellType, y = Q1, label = paste0("Q1: ", round(Q1, 2))), 
            position = position_nudge(x = 0.2), size = 3) +  
  theme_minimal(base_size = 15) +  
  labs(
    title = "Violin Plot: Distribution of Cell Types",
    x = "Cell Type",
    y = "Value"
  ) +
  theme(
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    axis.title = element_text(size = 10),
    plot.title = element_text(size = 12, hjust = 0.5),
    legend.position = "none"  
  )
print(violin_plot)
```
```{r}
#| echo: false 
#| label: boxplot
#| code-fold: false
#| fig-cap: "**Figure 3**: The boxplot displays the distribution of estimated cell counts across cell types."

boxplot_plot <- ggplot(data, aes(x = CellType, y = Value, fill = CellType)) +
  geom_boxplot(width = 0.1, position = position_dodge(width = 0.8), outlier.shape = NA) + 
  scale_fill_manual(values = getPalette(length(unique(data$CellType)))) +  
  theme_minimal(base_size = 15) +  
  labs(
    title = "Boxplot: Distribution of Cell Types",
    x = "Cell Type",
    y = "Value"
  ) +
  theme(
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    axis.title = element_text(size = 10),
    plot.title = element_text(size = 12, hjust = 0.5),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8))
print(boxplot_plot)
```
## <sup>Coverage Distribution</sup>


* This plot illustrates the distribution of coverage for each sample, with CpG sites represented along the x-axis and coverage values on the y-axis.
* Side-by-side view: Two boxes per sample—Panel and Total—compare on-target depth to genome-wide depth at a glance.
* Sorted by quality: Samples are arranged by median Panel depth, putting the best on the left and weak outliers on the right.
* Quick red-flags: Panel boxes should be higher and tighter; lower or wider ones signal poor capture or uneven coverage.
* Separate scales: Faceting splits Panel and Total axes so absolute depths are clear, exposing samples that fall below cut-offs.

```{r}
#| echo: false
#| label: Coverage Distribution (Boxplot) 1
#| code-fold: false
#| fig-cap: "**Figure 4**:  Comparison of Coverage per Sample Between Panel and Total Regions."

n_panel_cpg_sites <- nrow(input.coverage)
n_total_cpg_sites <- nrow(coverage_matrix)
n_samples <- ncol(coverage_matrix)

coverage_long <- bind_rows(
  input.coverage   %>% 
    mutate(Set = "Panel") %>%          
    pivot_longer(cols = -Set,
                 names_to = "Sample",
                 values_to = "Coverage"),
  coverage_matrix %>% 
    mutate(Set = "Total") %>% 
    pivot_longer(cols = -Set,
                 names_to = "Sample",
                 values_to = "Coverage")
)

sample_order <- coverage_long %>% 
  filter(Set == "Panel") %>%                
  group_by(Sample) %>% 
  summarise(med = median(Coverage, na.rm = TRUE)) %>% 
  arrange(desc(med)) %>% 
  pull(Sample)

coverage_long <- coverage_long %>% 
  mutate(Sample = factor(Sample, levels = sample_order))

ggplot(coverage_long,
       aes(x = Sample, y = Coverage, fill = Set)) +
  geom_boxplot(position = position_dodge(width = 0.75), outlier.size = .3) +
  labs(title = "Coverage per Sample: Panel vs Total",
       x = "Sample", y = "Coverage") +
  scale_x_discrete(labels = function(x) sub(".*_(S\\d+)", "\\1", x)) +
  theme_minimal(base_size = 9) +
  theme(axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1),
        legend.position = "top") + 
  annotate(
    "text",
    x     = Inf, y = Inf,
    hjust = 1.05, vjust = 1.1,
    size  = 3,
    label = glue::glue(
      "Panel regions: {n_panel_cpg_sites}\n",
      "Total regions: {n_total_cpg_sites}\n",
      "Samples: {n_samples}"
    )
  ) +
  coord_cartesian(clip = "off")
```
```{r}
#| echo: false
#| label: Coverage Distribution (Boxplot) 2
#| code-fold: false
#| fig-cap: "**Figure 5**: Boxplot of Coverage Distribution for Panel and Total Regions by Sample."
ggplot(coverage_long,
       aes(x = Sample, y = Coverage, fill = Set)) +
  geom_boxplot(outlier.size = .3) +
  facet_wrap(~Set, ncol = 1, scales = "free_y") +
  labs(title = "Coverage per Sample: Panel & Total",
       x = "Sample", y = "Coverage") +
  scale_x_discrete(labels = function(x) sub(".*_(S\\d+)", "\\1", x)) +
  theme_minimal(base_size = 9) +
  theme(axis.text.x = element_text(angle = 90, vjust = .5, hjust = 1),
        legend.position = "none")+
         annotate(
    "text",
    x      = Inf, y = Inf,          
    hjust  = 1.05, vjust = 1.1,
    size   = 3,
    label  = glue::glue(
      "Panel regions: {n_panel_cpg_sites}\n",
      "Total regions: {n_total_cpg_sites}\n",
      "Samples: {n_samples}"
    )
  ) +
  coord_cartesian(clip = "off")   
```
## <sup>PCA for Methylation</sup>
```{r, include=FALSE}
#| echo: false
#| label: PCA Scaled functions
#| code-fold: false
#| error: true

impute.matrix <- function(x, margin = 1, fun = function(x) mean(x, na.rm = TRUE)) {
    if (margin == 2) x <- t(x)
    idx <- which(is.na(x) | !is.finite(x), arr.ind = TRUE)
    if (length(idx) > 0) {
        na.idx <- unique(idx[,"row"])
        v <- apply(x[na.idx, , drop = FALSE], 1, fun)
        v[which(is.na(v))] <- fun(v)
        x[idx] <- v[match(idx[,"row"], na.idx)]
        stopifnot(all(!is.na(x)))
    }
    if (margin == 2) x <- t(x)
    x
}

# Function to perform PCA and generate scree plot and scatter plots
generate_pca_plots <- function(data, scale_data=TRUE, dataset_name = "Scaled Data") { 
  # Perform PCA
  pca_result <- prcomp(t(data), scale. = scale_data)
  
  # Calculate explained variance
  eigenvalues <- (pca_result$sdev)^2
  explained_variance <- eigenvalues / sum(eigenvalues)
  
  # Create Scree Plot
  scree_plot <- ggplot(data = data.frame(PC = 1:length(explained_variance), Variance = explained_variance), 
                       aes(x = PC, y = Variance)) +
    geom_bar(stat = "identity", fill = "steelblue") +
    labs(title = paste("Scree Plot -", dataset_name), x = "Principal Components", y = "Explained Variance") +
    theme_minimal()
  
  # Create PCA scores data frame
  pca_scores <- as.data.frame(pca_result$x)
  rownames(pca_scores) <- sub("\\.", "-", gsub("^X", "",rownames(pca_scores)))
  pca_scores$Sample <- rownames(pca_scores)
  
  # Merge with reads data
  pca_scores <- merge(pca_scores, reads, by.x = "Sample", by.y = "Sample", all.x = TRUE)
  
  # Create PCA scatter plots
  pcs <- list(c("PC1","PC2"),c("PC1","PC3"),c("PC2","PC3"),c("PC3","PC4"))
  scatter_plots <- lapply(pcs, function(pcs) {
      ggplot(pca_scores, aes_string(x = pcs[1], y = pcs[2], color = "Reads")) +
        geom_point() +
        geom_text(aes(label = sub(".*_(S\\d+)", "\\1", Sample, "")), vjust = -0.5, hjust = 0.5, size = 3) + 
        theme_minimal() +
        labs(title = paste("PCA Scatterplot:", pcs[1] , "vs", pcs[2], dataset_name), color = "Reads") +
        scale_color_gradient(low = "blue", high = "red")
  })
  
  # Return scree plot and scatter plots
  return(list(scree_plot = scree_plot, scatter_plots = scatter_plots))
}
```
```{r}
#| echo: false
#| label: PCA Scaled
#| code-fold: false
#| error: true

# Generate plots for Scaled data
  meth <- impute.matrix(data.frame(input.data), 2)
  # Generate PCA plots for scaled data
  scaled_plots <- generate_pca_plots(meth, scale_data = TRUE, dataset_name = "Scaled Data")
```
```{r}
#| echo: false
#| label: Scree Plot Scaled
#| error: true
#| fig-cap: "**Figure 6**: Scree Plot for Scaled Data. This plot shows the proportion of variance explained by the principal components for the scaled data. The first few components explain most of the variance."
print(scaled_plots$scree_plot)
```
```{r}
#| echo: false
#| label: Scatter Plot PC1 vs PC2 Scaled
#| error: true
#| fig-cap: "**Figure 7**: PCA Scatterplot of PC1 vs PC2 for Scaled Data. Each point represents a sample, color-coded based on the number of reads for the scaled dataset."
print(scaled_plots$scatter_plots[[1]])
```
```{r}
#| echo: false
#| label: Scatter Plot PC1 vs PC3 Scaled
#| error: true
#| fig-cap: "**Figure 8**: PCA Scatterplot of PC1 vs PC3 for Scaled Data. This plot shows the relationship between PC1 and PC3 for the scaled data."
print(scaled_plots$scatter_plots[[2]])
```
```{r}
#| echo: false
#| label: Scatter Plot PC2 vs PC3 Scaled
#| error: true
#| fig-cap: "**Figure 9**: PCA Scatterplot of PC2 vs PC3 for Scaled Data. This plot shows the relationship between PC2 and PC3 for the scaled data, with each point color-coded by read count."
print(scaled_plots$scatter_plots[[3]])
```
```{r}
#| echo: false
#| label: Scatter Plot PC3 vs PC4 Scaled
#| error: true
#| fig-cap: "**Figure 10**: PCA Scatterplot of PC3 vs PC4 for Scaled Data. This plot shows the relationship between PC3 and PC4 for the scaled data, with each point color-coded by read count."
print(scaled_plots$scatter_plots[[4]])
```
## <sup>Correlation for Methylation</sup>
```{r}
#| echo: false
#| label: Correlation for Methylation Raw/Scaled
#| error: true
#| code-fold: false

generate_correlation_plots <- function(data) {  
  # Calculate correlation matrices
  cor_matrix_no_standardize <- cor(data, use = "pairwise.complete.obs")
  meth_data_scaled_by_cpg <- t(scale(t(data)))  # Standardize CpG sites row-wise
  cor_matrix_standardized <- cor(meth_data_scaled_by_cpg, use = "pairwise.complete.obs")
  
  # Melt correlation matrices for plotting
  cor_melt_no_standardize <- melt(cor_matrix_no_standardize)
  cor_melt_standardized <- melt(cor_matrix_standardized)
  
  # Plot density of correlations without standardization
  p1 <- ggplot(cor_melt_no_standardize, aes(x = value)) +
    geom_density(fill = "blue", alpha = 0.5) +
    labs(title = paste("Density Plot Without Standardizing CpG Sites"), 
         x = "Correlation", y = "Density") +
    theme_minimal()
  
  # Plot density of correlations with standardization
  p2 <- ggplot(cor_melt_standardized, aes(x = value)) +
    geom_density(fill = "red", alpha = 0.5) +
    labs(title = paste("Density Plot With Standardizing CpG Sites"), 
         x = "Correlation", y = "Density") +
    theme_minimal()
  
  # Print the plots
   return(list(p1 = p1, p2 = p2))
}
  # Count the number of CpG sites and samples
  n_cpg_sites <- nrow(input.data)
  n_samples <- ncol(input.data) 
  cat("Number of CpG sites:", n_cpg_sites, "\n")
  cat("Number of samples:", n_samples, "\n")  
  # Generate correlation plots for full dataset
 plots <- generate_correlation_plots(input.data)
```
* This plot shows the distribution of pairwise correlations between samples without standardizing the CpG sites. 
* The plot provides an overview of the raw correlation data.

```{r}
#| echo: false
#| label: Density Plot Without Standardizing
#| error: true
#| fig-cap: "**Figure 11**: Density Plot Without Standardizing CpG Sites."

# Print the density plot for correlations without standardization
print(plots$p1)
```
* This plot shows the distribution of pairwise correlations between samples after standardizing the CpG sites. 

* Standardization normalizes CpG sites across samples, offering a clearer view of relative variations in the data.

```{r}
#| echo: false
#| label: Density Plot With Standardizing
#| error: true
#| fig-cap: "**Figure 12**: Density Plot With Standardizing CpG Sites."
print(plots$p2)
```
## <sup>Total Read Count per Sample (Coverage Depth)</sup>

* Coverage depth, not breadth: This plot tracks the total number of reads (depth) hitting the CpG loci and serves as an important depth-based quality control metric.
* Panel vs. total at a glance: This plot instantly identifies libraries where the total read depth is sufficient, but the panel capture produced a low number of reads (small coral bar).

```{r}
#| echo: false
#| label: total-read-count 
#| error: true
#| fig-cap: "**Figure 13**: A horizontal bar plot showing, for every library, the **total number of reads** covering CpG loci in the whole methylome (blue) and in the targeted panel (coral). Values inside the bars give the raw read counts; panel bars are always shorter because their reads are a subset of the total."

Panel_Regions_Depth <- colSums(input.coverage, na.rm = TRUE)
Total_Regions_Depth <- colSums(coverage_matrix, na.rm = TRUE)
depth_tbl <- tibble(
  Sample        = names(Total_Regions_Depth),
  Total_Regions = Total_Regions_Depth,
  Panel_Regions = Panel_Regions_Depth
) %>%
  arrange(Total_Regions)
depth_long <- depth_tbl %>%
  pivot_longer(
    cols = c(Total_Regions, Panel_Regions),
    names_to  = "Region_Type",
    values_to = "Count"
  ) %>%
  mutate(
    Region_Type = factor(Region_Type,
                         levels = c("Total_Regions", "Panel_Regions")),
    Sample      = factor(Sample, levels = depth_tbl$Sample)
  )

ggplot(depth_long, aes(x = Count, y = Sample, fill = Region_Type)) +
  geom_col(position = position_dodge(width = 0.8),
           width = 0.8, colour = "grey20", linewidth = 0.10) +
  geom_text(aes(label = scales::comma(Count)),
            position = position_dodge(width = 0.8),
            hjust = -0.1, size = 3) +
  scale_fill_manual(values = c(Total_Regions = "#4E79A7",
                               Panel_Regions = "#E15759"),
                    labels = c("Total Reads over All Sites", "Total Reads over Panel Sites"),
                    name = NULL) +
  scale_x_continuous(labels = scales::label_number(scale_cut = scales::cut_short_scale()),
                     expand = expansion(mult = c(0, 0.35))) +
  labs(title = "Total Read Count per Sample (Coverage Depth)",
       x = "Total Reads Covering CpG Sites",
       y = "Sample") + 
  theme_minimal(base_size = 11) +
  theme(legend.position = "top",
        panel.grid.major.y = element_blank(),
        panel.grid.minor.x = element_blank()) +        
  annotate("text", x = Inf, y = Inf, hjust = 1.05, vjust = 1.1, size = 3,
           label = glue::glue(
             "Total Panel CpG Sites : {scales::comma(n_panel_cpg_sites)}\n",
             "Total CpG Sites       : {scales::comma(n_total_cpg_sites)}\n",
             "Samples               : {n_samples}"
           ))
```

## <sup>Number of CpG Sites Covered per Sample (Coverage Breadth)</sup>

* Coverage breadth, not depth: This plot tracks how many unique CpG loci are detected (with ≥1 read), complementing depth-based QC by ensuring a wide range of sites were captured.
* Panel vs. total at a glance: The plot instantly flags libraries where the panel capture was inefficient (a small coral bar), even if the overall genome-wide site capture was acceptable.

```{r}
#| echo: false
#| label: covered-site-count
#| error: true
#| fig-cap: "**Figure 14**: A horizontal bar plot showing, for every library, the **number of unique CpG loci** covered by at least one read (≥1× depth) in the whole methylome (blue) and in the targeted panel (coral). Values inside the bars give the raw counts of loci."

Panel_Regions_Count <- colSums(input.coverage > 0, na.rm = TRUE)
Total_Regions_Count <- colSums(coverage_matrix > 0, na.rm = TRUE)

region_tbl <- tibble(
  Sample        = names(Total_Regions_Count),
  Total_Regions = Total_Regions_Count,
  Panel_Regions = Panel_Regions_Count
) %>%
  arrange(Total_Regions)
regions_long <- region_tbl %>%
  pivot_longer(
    cols = c(Total_Regions, Panel_Regions),
    names_to  = "Region_Type",
    values_to = "Count"
  ) %>%
  mutate(
    Region_Type = factor(Region_Type,
                         levels = c("Total_Regions", "Panel_Regions")),
    # Sample faktör seviyelerini 'region_tbl'deki sıraya göre ayarla.
    # Bu, ggplot'un en büyük değeri en üste çizmesini sağlar.
    Sample      = factor(Sample, levels = region_tbl$Sample)
  )
ggplot(regions_long, aes(x = Count, y = Sample, fill = Region_Type)) +
  geom_col(position = position_dodge(width = 0.8),
           width = 0.8, colour = "grey20", linewidth = 0.10) +
  geom_text(aes(label = scales::comma(Count)),
            position = position_dodge(width = 0.8),
            hjust = -0.1, size = 3) +
  scale_fill_manual(values = c(Total_Regions = "#4E79A7",
                               Panel_Regions = "#E15759"),
                    labels = c("Total Covered CpG Sites", "Panel Covered CpG Sites"),
                    name = NULL) +
  scale_x_continuous(labels = scales::comma,
                     expand = expansion(mult = c(0, 0.35))) + 
  labs(title = "Number of CpG Sites Covered per Sample (Breadth)",
       x = "Number of Covered CpG Sites",
       y = "Sample") +
  theme_minimal(base_size = 11) +
  theme(legend.position = "top",
        panel.grid.major.y = element_blank(),
        panel.grid.minor.x = element_blank()) +
  annotate("text", x = Inf, y = Inf, hjust = 1.05, vjust = 1.1, size = 3,
           label = glue::glue(
             "Total Panel CpG Sites : {scales::comma(n_panel_cpg_sites)}\n",
             "Total CpG Sites       : {scales::comma(n_total_cpg_sites)}\n",
             "Samples               : {n_samples}"
           ))
```

## <sup>Panel CpG Coverage Completeness per Sample</sup>

* Panel completeness metric: Figure 14 ranks samples by the proportion of panel CpGs recovered—handy for setting an inclusion cut-off (e.g. > 95 %).

```{r}
#| echo: false
#| label: total-read-count panel  
#| error: true
#| fig-cap: "**Figure 15**: For each sample, the bar length equals the count of panel CpGs covered at ≥1×. The percentage label indicates what fraction of the fixed panel size ( *n = r total_panel_sites CpGs ) was recovered."

total_panel_sites <- nrow(input.coverage)   
covered_panel_sites <- colSums(input.coverage > 0, na.rm = TRUE)

coverage_df <- tibble(
  Sample              = names(covered_panel_sites),
  Covered_Panel_Sites = covered_panel_sites
) |>
  mutate(
    Covered_Pct = 100 * Covered_Panel_Sites / total_panel_sites
  ) |>
  arrange(desc(Covered_Panel_Sites))                    

ggplot(coverage_df,
       aes(x = reorder(Sample, Covered_Panel_Sites),
           y = Covered_Panel_Sites)) +
  geom_col(fill = "#4E79A7", width = 0.75,
           colour = "grey20", linewidth = 0.15) +
  geom_text(aes(label = sprintf("%.1f%%", Covered_Pct)),
            hjust = -0.15, size = 3) +
  coord_flip(clip = "off") +
  scale_y_continuous(
    limits = c(0, total_panel_sites * 1.05),
    breaks = scales::pretty_breaks(5)
  ) +
  labs(
    title = "Panel CpG Sites Covered per Sample",
    subtitle = glue::glue("{total_panel_sites} total panel CpG sites"),
    x = "Sample",
    y = "CpG Sites"
  ) +
  theme_minimal(base_size = 10) +
  theme(
    panel.grid.major.y = element_blank()
  )
```